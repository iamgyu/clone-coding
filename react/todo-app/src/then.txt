.then() 함수는 JavaScript에서 비동기 코드를 작성하는 데 사용되는 promise의 메서드
promise가 이행되거나 거부될 때 실행될 콜백함수를 취함
then, catch는 새로운 promise 객체를 반환
then 메서드는 두 개의 콜백함수를 받는데 첫 번째는 이행됐을 때 실행되는 콜백함수, 두 번째는 거부됐을 때 실행되는 콜백함수

promise가 '이행'되면 .then() 함수는 promise의 '결과'를 콜백함수의 첫 번째 인수로 전달
promise가 '거부'되면 .then() 함수는 promise의 '오류'를 콜백함수의 첫 번째 인수로 전달

catch 메서드를 통해 거부 상태에 대한 처리를 별도로 할 수 있음

-----------------------------------------------------------------------
promise는 JavaScript 비동기 처리에 사용되는 객체
완료가 예정된 작업의 실행 결과를 의미하는 대리자

promise의 3가지 상태(state)
- pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태, 초기 상태
- fulfilled(이행) : 비동기 처리가 완료되어 promise가 결과값을 반환해준 상태
- rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태

여러개의 promise를 연결하여 사용할 수 있음
비동기 메서드에서 마치 동기 메서드처럼 값을 반환할 수 있음

*비동기 처리란?*
특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 JavaScript 특성

*콜백*
다른 함수의 인수로 넘겨주는 함수
호출(call back)되어 실행(execute)될 목적으로 인수로 넘기는 함수

promise를 사용하는 async await를 활용하여 비동기 처리를 동기 처리처럼 표현